K2 Trading Bot API Integration Guide
================================

Server Details:
--------------
API Base URL: http://167.86.79.2:5000
Available Endpoints:
1. GET /bot/status - Check bot status
2. GET/POST /bot/toggle/on - Turn bot on
3. GET/POST /bot/toggle/off - Turn bot off

JavaScript Integration Code:
--------------------------
// Add these functions to your JavaScript project:

// Function to check bot status
async function checkBotStatus() {
    try {
        const response = await fetch('http://167.86.79.2:5000/bot/status');
        const data = await response.json();
        return {
            enabled: data.enabled,
            leverage: data.leverage
        };
    } catch (error) {
        console.error('Error checking bot status:', error);
        return null;
    }
}

// Function to turn bot on
async function turnBotOn() {
    try {
        const response = await fetch('http://167.86.79.2:5000/bot/toggle/on');
        const data = await response.json();
        return data.enabled;
    } catch (error) {
        console.error('Error turning bot on:', error);
        return false;
    }
}

// Function to turn bot off
async function turnBotOff() {
    try {
        const response = await fetch('http://167.86.79.2:5000/bot/toggle/off');
        const data = await response.json();
        return !data.enabled;
    } catch (error) {
        console.error('Error turning bot off:', error);
        return false;
    }
}

React Component Example:
----------------------
// Example of a React component with bot controls

import React, { useState, useEffect } from 'react';

function BotControl() {
    const [botEnabled, setBotEnabled] = useState(false);
    const [leverage, setLeverage] = useState(1);

    // Check bot status on component mount
    useEffect(() => {
        const checkStatus = async () => {
            const status = await checkBotStatus();
            if (status) {
                setBotEnabled(status.enabled);
                setLeverage(status.leverage);
            }
        };
        checkStatus();
        // Poll status every 30 seconds
        const interval = setInterval(checkStatus, 30000);
        return () => clearInterval(interval);
    }, []);

    // Handle toggle button click
    const handleToggle = async () => {
        const success = botEnabled ? await turnBotOff() : await turnBotOn();
        if (success) {
            setBotEnabled(!botEnabled);
        }
    };

    return (
        <div className="bot-control">
            <h2>Bot Control Panel</h2>
            <div className="status">
                <p>Status: {botEnabled ? 'Running' : 'Stopped'}</p>
                <p>Current Leverage: {leverage}x</p>
            </div>
            <button 
                onClick={handleToggle}
                className={botEnabled ? 'stop' : 'start'}
            >
                {botEnabled ? 'Stop Bot' : 'Start Bot'}
            </button>
        </div>
    );
}

CSS Styling Example:
------------------
.bot-control {
    padding: 20px;
    border-radius: 8px;
    background: #f5f5f5;
    max-width: 400px;
    margin: 20px auto;
}

.status {
    margin: 15px 0;
    padding: 10px;
    background: #fff;
    border-radius: 4px;
}

button {
    padding: 10px 20px;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.3s;
}

button.start {
    background: #4CAF50;
    color: white;
}

button.stop {
    background: #f44336;
    color: white;
}

Important Notes:
--------------
1. Server Status:
   - The API server runs on your Contabo VPS (167.86.79.2:5000)
   - The bot script runs separately in a screen session
   - Both need to be running for the system to work

2. Running the Services:
   - API Server: screen -S bot_api python bot_api.py
   - Trading Bot: screen -S trading_bot python test_leverage.py

3. CORS:
   - The API server is configured to accept requests from any origin
   - If you need to restrict this, modify the CORS settings in bot_api.py

4. Error Handling:
   - All API calls include basic error handling
   - Implement additional error handling as needed for your use case

5. Security Considerations:
   - The API currently has no authentication
   - Consider adding API key authentication if needed
   - Use HTTPS if implementing in production

Next Steps:
----------
1. Copy the JavaScript functions to your project
2. Implement the React component or adapt it to your framework
3. Add the CSS styles
4. Test the integration
5. Monitor the bot's behavior through your dashboard

For any issues:
- Check if both the API server and bot are running
- Verify the API endpoints are accessible
- Check browser console for any CORS errors
- Ensure the VPS firewall allows connections to port 5000

# Contabo Server Connection Details
NEXT_PUBLIC_CONTABO_HOST=167.86.79.2
NEXT_PUBLIC_CONTABO_USERNAME=root

# Choose ONE of these authentication methods:

# Option 1: Password Authentication
NEXT_PUBLIC_CONTABO_PASSWORD=your_root_password

# Option 2: SSH Key Authentication (if you prefer using SSH keys)
# NEXT_PUBLIC_CONTABO_PRIVATE_KEY=/path/to/your/private/key

# Bot API Details
NEXT_PUBLIC_BOT_API_URL=http://167.86.79.2:5000

# Bot API Endpoints (for reference)
# Status: GET http://167.86.79.2:5000/status or /bot/status
# Toggle ON: GET http://167.86.79.2:5000/bot/toggle/on
# Toggle OFF: GET http://167.86.79.2:5000/bot/toggle/off
# Toggle (POST): http://167.86.79.2:5000/toggle with body {"enabled": true/false}
# Market Data: GET http://167.86.79.2:5000/market-data

# Market Data Response Format:
# {
#   "last_update": timestamp,
#   "market_data": {
#     "current_price": float,
#     "account_value": float,
#     "indicators": {
#       "ema1": float,
#       "ema2": float,
#       "hma": float,
#       "rsi": float
#     },
#     "position": {
#       "is_open": boolean,
#       "entry_price": float,
#       "current_pnl": float,
#       "highest_price": float,
#       "trailing_stop": float
#     },
#     "market_stats": {
#       "24h_volume": float,
#       "24h_high": float,
#       "24h_low": float,
#       "volatility": float
#     }
#   }
# }

# Note: Replace 'your_root_password' with your actual root password
# Important: Keep these credentials secure and never commit them to version control
